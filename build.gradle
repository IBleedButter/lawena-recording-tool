import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def mainClassName = 'ui.LwrtGUI'
def buildtime = new Date().format("yyyyMMddHHmmss")

defaultTasks 'clean', 'run'

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.lingala.zip4j:zip4j:1.3.3'
    implementation 'com.github.spullara.mustache.java:compiler:0.9.13'
    testImplementation 'junit:junit:4.13.2'
}

test {
    testLogging.showStandardStreams = true
}

sourceSets {
    main {
        resources {
            exclude '**/*.db'
        }
    }
}

try {
    new ByteArrayOutputStream().withStream { execOS ->
        exec {
            executable = 'git'
            args = [ 'describe', '--tags', '--always' ]
            standardOutput = execOS
        }
        def describe = execOS.toString().trim()
        version describe
    }
} catch (Exception e) {
    println "Could not retrieve version number"
}

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    archiveFileName = 'lawena.jar'
    destinationDirectory = file('target')
    def implVersion = (archiveVersion == null ? "v4" : archiveVersion)
    manifest {
        attributes (
            'Main-Class': mainClassName,
            'Implementation-Title': 'Lawena Recording Tool',
            'Implementation-Version': implVersion,
            'Implementation-Build': buildtime,
            'SplashScreen-Image': 'ui/splash.png'
        )
    }
}

wrapper {
    gradleVersion = '7.3'
}

task run(type: JavaExec, dependsOn: 'classes') {
    description "Runs this project as a JVM application"
    main mainClassName
    classpath project.sourceSets.main.runtimeClasspath
}

task exe(dependsOn: 'jar') {
    doLast {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', 'buildLauncher.bat'
            }
        }
    }
}

task copyMainJar(type: Copy, dependsOn: 'jar') {
    from 'lawena.jar'
    into 'src/main/dist/lawena'
}

task copyGradleLauncher(type: Copy) {
    from(projectDir) {
        include 'gradlew'
        include 'gradlew.bat'
    }
    from 'gradle'
    into 'build/gradlew/lawena'
}

task copyLibs(dependsOn: ['copyMainJar', 'copyGradleLauncher']) {}

task packResources(type: Zip) {
    archiveFileName = 'lwrtresources.jar'
    destinationDirectory = file('src/main/dist/lawena')
    from projectDir
    includes = ['cfg/**', 'hud/**']
}

task packVpks(type: Zip) {
    archiveFileName = 'lwrtvpks.jar'
    destinationDirectory = file('src/main/dist/lawena')
    from projectDir
    includes = ['custom/**']
}

task packWinBatches(type: Zip) {
    archiveFileName = 'lwrtwinstuff.jar'
    destinationDirectory = file('src/main/dist/lawena')
    from projectDir
    includes = ['batch/**', 'vtfcmd/**']
}

task packSkyboxes(type: Zip) {
    archiveFileName = 'skybox.jar'
    destinationDirectory = file('src/main/dist/lawena')
    from projectDir
    includes = ['skybox/**']
    excludes = ['**/*.db']
}

task pack(dependsOn: ['packResources', 'packVpks', 'packWinBatches', 'packSkyboxes']) {}
